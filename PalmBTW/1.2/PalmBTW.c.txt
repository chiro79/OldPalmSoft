#define AppCreator 'nick'
#include "FloatLib.h"
	#define MainForm		1000
	
	#define AboutForm 1100
	#define LicenseForm	1150
	#define ManualForm	1250
	#define AmountField 1300
	#define TipField 1450
	#define TotalTipField 1400
	#define TotalField 1350
	#define TipPercList 1101
	#define TipPerPopUp 1102
	#define ConvBtn	1500
	#define FifteenBtn 1600 
	#define TwentyBtn 1700
	#define ResetBtn 1750
	#define AboutAlert 2000
	#define ManualMenuAbout 3000
	#define WarningAlert 2200
	#define OptionsMenuAbout 2000
	#define listM 33
	#define CloseAboutMenuBtn 1110
	#define LicenseBtn 1112
	#define LicenseCloseBtn 1160
	#define LicenseField 1170
	#define ManualCloseBtn 1260
	#define ManualField 1270

	typedef enum { 
  nfCommaPeriod, 
  nfPeriodComma, 
  nfSpaceComma, 
  nfApostrophePeriod, 
  nfApostropheComma 
} NumberFormatType;

	


// Prototypes

	int a,d, z;
	static char	AmountChar[150];
	static char localizedNum[150]; 

	static char	TipChar[150];
	static char     TotalChar[150];
		double AmountFl, g,b,c, TotalFl;	
	double MaxNumber=2000000000.0;
	double conversion();
	
	void display();
	

//void initMath();  
	
NumberFormatType numFormat; 
Char thousandsSeparator, decimalSeparator; 


UInt32 PrefGetPreference(NumberFormatType prefNumberFormat)
SYS_TRAP(sysTrapPrefGetPreference);
void LocGetNumberSeparators (NumberFormatType prefnumberFormat, Char *thousandSeparator, Char *decimalSeparator)
SYS_TRAP(sysTrapLocGetNumberSeparators);
CharPtr StrDelocalizeNumber (CharPtr s, Char thousandSeparator, Char decimalSeparator)
SYS_TRAP(sysTrapStrDelocalizeNumber);


	static Boolean	appHandleEvent (EventPtr event);
	static void	mainFormInit (FormPtr form);
	static Boolean	mainFormEventHandler (EventPtr event);
	static void	AboutFormInit (FormPtr form);
	static Boolean	AboutFormEventHandler (EventPtr event);
	static Boolean	LicenseFormEventHandler (EventPtr event);
	static void	LicenseFormInit (FormPtr form);
	static Boolean	ManualFormEventHandler (EventPtr event);
	static void	ManualFormInit (FormPtr form);	
	void LstDrawList (ListType *listP) SYS_TRAP(sysTrapLstDrawList);
	void LstSetDrawFunction (ListType *listP, ListDrawDataFuncPtr func) 
		SYS_TRAP(sysTrapLstSetDrawFunction);
	void WinDrawTruncChars (Char *c, int i, int x, int y, int w)
		SYS_TRAP(sysTrapWinDrawTruncChars);	
	
	//void termMath();
	
	
	static char	*listPercM[listM]= {"1%","2%","3%","4%","5%",
						"6%","7%","8%","9%","10%",
						"11%","12%","13%","14%",
						"15%","16%","17%","18%",
						"19%","20%","21%","22%","23%",
						"24%","25%","30%","35%","40%",
						"45%","50%","55%","60%","65%"   };


void	drawTipListM	(Int16 i, RectangleType	*bounds, Char **items)
	{
WinDrawTruncChars (listPercM[i], StrLen(listPercM[i]), bounds->topLeft.x, bounds->topLeft.y, bounds->extent.x);
	}

	void	setupListTipM(int lIndex)
	{
		FormPtr pForm	= FrmGetActiveForm();
		void	*pList	= getObjectPtr(pForm, lIndex);
		LstSetListChoices (pList, 0, listM);
		LstSetDrawFunction (pList, (ListDrawDataFuncPtr) drawTipListM);

		// Don't redraw the list
	}


	

	/*
	 * startApp and stopApp are here for future reference.  They clearly 
	 * don't do anything for this program, but it's a good idea to do 
	 * program clean-up and shutdown in these files.  One thing that 
	 * typically goes here is database opening and closing.
	 */

	static void	startApp()	{return;}
	static void	stopApp()	{return;}

	/*
	 * A Palm program starts at the PilotMain function -- you can use 
	 * this example verbatim for most (maybe all) your Palm applications.  
	 * Some other examples might separate the event loop into a separate 
	 * function but we've combined the two, here.  This function does 
	 * the following.
	 *
	 *	o  calls startApp, 
	 *	o  initiates the first form, 
	 *	o  handles the event loop, 
	 *	o  cleans-up (when it gets the 'leaving now' event), and 
	 *	o  leaves.
	 */


		DWord
	PilotMain(Word cmd, char *cmdPBP, Word launchFlags)
	{
		EventType	event;
		Word		error;
		if (cmd == sysAppLaunchCmdNormalLaunch) 
		{
			startApp();
			//initMath();
			/*
			 * FrmGotForm generates a frmLoadEvent that'll get 
			 * handled as soon as we have an event handler that 
			 * knows what to do with it.
			 */

			FrmGotoForm(MainForm);

LocGetNumberSeparators((NumberFormatType) PrefGetPreference(nfSpaceComma) , &thousandsSeparator, &decimalSeparator); 

			/*
			 * This loop gets events, handles the events, and 
			 * checks to see if we've got a 'done' event.
			 */

			do 
			{
				/*
				 * Wait for an event (we already generated the 
				 * first one).
				 */

				EvtGetEvent(&event, evtWaitForever);

				/*
				 * Then, ask the system, the menu system, 
				 * and our *OWN* event handlers (one for the 
				 * application as a whole and one for the 
				 * current form) to deal with the event.
				 */

				if (!SysHandleEvent (&event))
				if (!MenuHandleEvent (0, &event, &error))
				if (!appHandleEvent (&event))
					FrmDispatchEvent (&event);

			} while (event.eType != appStopEvent);

			/*
			 * When we're done, shut down
			 */
			//termMath();	
			stopApp();
			FrmCloseAllForms();
		}
		return 0;
	}

	/*
	 * This is the top-level event handler for the entire application.  
	 * Here, we handle form load events and our menu events.
	 */


		static Boolean 
	appHandleEvent (EventPtr event) 
	{
		FormPtr	frm;
		Int	formId;
		Boolean	handled = false;
		
		if (event->eType == frmLoadEvent) 
		{
			/*
			* Load the resource for the form
			*/

			formId	= event->data.frmLoad.formID;
			frm	= FrmInitForm(formId);

			FrmSetActiveForm(frm);

			/*
			* install a form-specific event handler
			*/

			if (formId == MainForm)
				FrmSetEventHandler (frm, mainFormEventHandler);
			if (formId == AboutForm)
				FrmSetEventHandler (frm, AboutFormEventHandler);			
			if (formId == LicenseForm)
				FrmSetEventHandler (frm, LicenseFormEventHandler);
			if (formId == ManualForm)
				FrmSetEventHandler (frm, ManualFormEventHandler);

			// *** ADD NEW FORM HANDLING HERE *** //
			

			handled = true;
		}       
		return handled;
	}


	/*
	 * This is the event handler for the main form.  It handles all of 
	 * the user interactions with the user interface objects (e.g., 
	 * buttons, lists, text fields, and such) on the main form.
	 */


		static Boolean
	mainFormEventHandler(EventPtr event)
	{
		Boolean	handled	= false;
		FormPtr	frmP	= FrmGetActiveForm();
		switch (event->eType) 
		{

		/*
		 * the first event received by a form's event handler is
		 * the frmOpenEvent.  
		 */

		case frmOpenEvent:
			FrmDrawForm(frmP);
			mainFormInit(frmP);
			handled = true;
			break;  
		case menuEvent:
			handled=doMenu(frmP, event->data.menu.itemID);
			break;
		
		case fldEnterEvent:
                      	switch(event->data.fldEnter.fieldID)
			{	
			case AmountField:
			{z=0;
			setFieldText (AmountField, "");
			FrmSetFocus(frmP, FrmGetObjectIndex(frmP, AmountField));
			setFieldText (TotalTipField, " 0,00");
			setFieldText (TotalField, " 0,00");
			handled = true;
			break;}
			case TotalField:
			{z=1;
			setFieldText (AmountField, " 0,00");
			setFieldText (TotalTipField, " 0,00");
			setFieldText (TotalField, "");
			FrmSetFocus(frmP, FrmGetObjectIndex(frmP, TotalField));
			handled = true;
			break;}
			break;
			}	
		
		// *** ADD EVENT HANDLING HERE *** //
		case ctlSelectEvent:
			switch(event->data.ctlSelect.controlID)
			{
			case	ConvBtn:
			{
				//add here
				
												
				conversion();
				
				if(c>MaxNumber)	
				{UInt16 alertSelection = FrmAlert(WarningAlert);
				setFieldText (AmountField, "");
				FrmSetFocus(frmP, FrmGetObjectIndex(frmP, AmountField));
				setFieldText (TotalTipField, " 0,00");
				setFieldText (TotalField, " 0,00");
				handled = true;
				break;
				}	
				
								
				display();

				handled = true;
				break;
			}
			
			case	FifteenBtn:
			{
				g=6.0;
				setFieldText (TipField, "6%");
				conversion();
				
				if(c>MaxNumber)	
				{UInt16 alertSelection = FrmAlert(WarningAlert);
				setFieldText (AmountField, "");
				FrmSetFocus(frmP, FrmGetObjectIndex(frmP, AmountField));
				setFieldText (TotalTipField, " 0,00");
				setFieldText (TotalField, " 0,00");
				handled = true;
				break;
				}
				
								
				display();

				handled = true;
				break;
				
				
			}
	
			case	TwentyBtn:
			{	g=19.0;
				setFieldText (TipField, "19%");
				conversion();
				
				if(c>MaxNumber)	
				{UInt16 alertSelection = FrmAlert(WarningAlert);
				setFieldText (AmountField, "");
				FrmSetFocus(frmP, FrmGetObjectIndex(frmP, AmountField));
				setFieldText (TotalTipField, " 0,00");
				setFieldText (TotalField, " 0,00");
				handled = true;
				break;
				}
				
								
				display();
				handled = true;
				break;
				
				
			}
			case ResetBtn:
			{
		setFieldText (AmountField, "");
		FrmSetFocus(frmP, FrmGetObjectIndex(frmP, AmountField));
		setFieldText (TotalField, " 0,00");
		setFieldText (TipField, "19%");
		setFieldText (TotalTipField, " 0,00");
		
		setupListTipM(TipPercList);
		
		
		g=19.0;
			}

			}


		break;

//LISTS
		case popSelectEvent:
			{a=0;
		int	i	= event->data.popSelect.selection;

		switch (event->data.popSelect.controlID)
		{
		case TipPerPopUp:
						
			setFieldText(TipField, listPercM[i]);
			
			
			if(i==0)
			{g=1.00;}
			if(i==1)
			{g=2.00;}
			if(i==2)
			{g=3.00;}
			if(i==3)
			{g=4.00;}
			if(i==4)
			{g=5.00;}
			if(i==5)
			{g=6.00;}
			if(i==6)
			{g=7.00;}
			if(i==7)
			{g=8.00;}
			if(i==8)
			{g=9.00;}
			if(i==9)
			{g=10.00;}
			if(i==10)
			{g=11.00;}
			if(i==11)
			{g=12.00;}
			if(i==12)
			{g=13.00;}
			if(i==13)
			{g=14.00;}
			if(i==14)
			{g=15.00;}
			if(i==15)
			{g=16.00;}
			if(i==16)
			{g=17.00;}
			if(i==17)
			{g=18.00;}
			if(i==18)
			{g=19.00;}
			if(i==19)
			{g=20.00;}
			if(i==20)
			{g=21.00;}
			if(i==21)
			{g=22.00;}
			if(i==22)
			{g=23.00;}
			if(i==23)
			{g=24.00;}
			if(i==24)
			{g=25.00;}
			if(i==25)
			{g=30.00;}
			if(i==26)
			{g=35.00;}
			if(i==27)
			{g=40.00;}
			if(i==28)
			{g=45.00;}
			if(i==29)
			{g=50.00;}
			if(i==30)
			{g=55.00;}
			if(i==31)
			{g=60.00;}
			if(i==32)
			{g=65.00;}
				conversion();
				
				if(c>MaxNumber)	
				{UInt16 alertSelection = FrmAlert(WarningAlert);
				setFieldText (AmountField, "");
				FrmSetFocus(frmP, FrmGetObjectIndex(frmP, AmountField));
				setFieldText (TotalTipField, " 0,00");
				setFieldText (TotalField, " 0,00");
				handled = true;
				break;
				}
				
			
				
								
				display();
			

		

			handled = true;
			break;
			
}

//other buttons...


			}


		}
		return handled;
	}

	/*
	 * This is the startup code for the form.  Here, we write our message 
	 * to the screen.
	 */

		static void 
	mainFormInit (FormPtr frmP)
	{
		setFieldText (AmountField, "");
		FrmSetFocus(frmP, FrmGetObjectIndex(frmP, AmountField));
		setFieldText (TotalField, " 0,00");
		setFieldText (TipField, "19%");
		setFieldText (TotalTipField, " 0,00");
		
		setupListTipM(TipPercList);
		
		z=0;
		g=19.0;


		// *** ADD FORM INITIALIZATION HERE *** //
		
	}


static void 
	AboutFormInit (FormPtr frmP)
	{
		
		// *** ADD FORM INITIALIZATION HERE *** //
		
	}

static void 
	LicenseFormInit (FormPtr frmP)
	{
		
		MemHandle t=DmGetResource('tSTR', 2000);


    static Char    *foo    = (static Char *) MemHandleLock(t);
   
setFieldText(LicenseField, foo);

    //MemHandleUnlock (t);
    DmReleaseResource(t);
		
	}

static void 
	ManualFormInit (FormPtr frmP)
	{
		
		MemHandle t=DmGetResource('tSTR', 2100);


    static Char    *foo    = (static Char *) MemHandleLock(t);
   
setFieldText(ManualField, foo);

    //MemHandleUnlock (t);
    DmReleaseResource(t);
		
	}

static Boolean
	AboutFormEventHandler(EventPtr event)
	{
		Boolean	handled	= false;
		FormPtr	frmP	= FrmGetActiveForm();
		switch (event->eType) 
		{

		/*
		 * the first event received by a form's event handler is
		 * the frmOpenEvent.  
		 */

		case frmOpenEvent:
			FrmDrawForm(frmP);
			AboutFormInit(frmP);
			handled = true;
			break;  
		
		
		// *** ADD EVENT HANDLING HERE *** //
//BUTTONS
		case ctlSelectEvent:
			switch(event->data.ctlSelect.controlID)
			{
			case	CloseAboutMenuBtn:
			{	FrmGotoForm(MainForm);
				handled = true;
				break;
			}
			//other buttons...
			case	LicenseBtn:
			{	FrmGotoForm(LicenseForm);
				handled = true;
				break;
			}
			}
			break;
}
return handled;
}


static Boolean
	LicenseFormEventHandler(EventPtr event)
	{
		Boolean	handled	= false;
		FormPtr	frmP	= FrmGetActiveForm();
		switch (event->eType) 
		{

		/*
		 * the first event received by a form's event handler is
		 * the frmOpenEvent.  
		 */

		case frmOpenEvent:
			FrmDrawForm(frmP);
			LicenseFormInit(frmP);
			handled = true;
			break;  
		
		
		// *** ADD EVENT HANDLING HERE *** //
//BUTTONS
		case ctlSelectEvent:
			switch(event->data.ctlSelect.controlID)
			{
			case	LicenseCloseBtn:
			{	FrmGotoForm(AboutForm);
				handled = true;
				break;
			}
			//other buttons...
			
			}
			break;
}
return handled;
}


static Boolean
	ManualFormEventHandler(EventPtr event)
	{
		Boolean	handled	= false;
		FormPtr	frmP	= FrmGetActiveForm();
		switch (event->eType) 
		{

		/*
		 * the first event received by a form's event handler is
		 * the frmOpenEvent.  
		 */

		case frmOpenEvent:
			FrmDrawForm(frmP);
			ManualFormInit(frmP);
			handled = true;
			break;  
		
		
		// *** ADD EVENT HANDLING HERE *** //
//BUTTONS
		case ctlSelectEvent:
			switch(event->data.ctlSelect.controlID)
			{
			case	ManualCloseBtn:
			{	FrmGotoForm(MainForm);
				handled = true;
				break;
			}
			//other buttons...
			
			}
			break;
}
return handled;
}

//*************************************************************************
//  Routines necessary for MathLib
//**************************************************************************

/*
void initMath() {
Err err;
err = SysLibFind("MathLib", &MathLibRef);
if (err != 0) { // library not loaded already
    err = SysLibLoad('libr', 'MthL', &MathLibRef);
    if (err == 0)
        err = MathLibOpen (MathLibRef, 1);
    }
}
void termMath() {
if (MathLibRef != -1) {
    Err err;
    UInt usecount;
    err = MathLibClose (MathLibRef, &usecount);
    if (usecount == 0)
        SysLibRemove (MathLibRef);
    }
}

*/
//*************************************************************************
static Boolean	doMenu(FormPtr frmP, Word command)
{
	Boolean handled = false;
	switch (command) {
			case OptionsMenuAbout:
			FrmGotoForm(AboutForm);
			handled = true;
			break;
			case ManualMenuAbout:
			FrmGotoForm(ManualForm);
			handled = true;
			break;

}

	return handled;
}
double conversion()
			{
				if(z==0)
			
				{

				FlpCompDouble AmountFloat;

				getFieldText (AmountField,localizedNum);
				AmountFloat.fd = FlpAToF(StrDelocalizeNumber(localizedNum,  thousandsSeparator,decimalSeparator));  
				//getFieldText (AmountField,AmountChar);				
				//AmountFloat.fd = FlpAToF(AmountChar);
				AmountFl = AmountFloat.d;
				
				b=AmountFl*(g/100);
				c=AmountFl+b;
				}
				
				if(z==1)
				{
				FlpCompDouble TotalFloat;
				getFieldText (TotalField,localizedNum);
				
				TotalFloat.fd = FlpAToF(StrDelocalizeNumber(localizedNum,
						  thousandsSeparator,decimalSeparator));  

				//TotalFloat.fd = FlpAToF(TotalChar);
				TotalFl = TotalFloat.d;
				
				c=TotalFl*100/(100+g);
				b=TotalFl-c;
				}

	return b;
	}	

	void display()
	{			if(z==0)
				{
				floatToStr(TipChar, b, 2);
				floatToStr(TotalChar, c, 2);
				setFieldText (TotalTipField, TipChar);
				//setFieldText (TotalTipField, &decimalSeparator);
				setFieldText (TotalField, TotalChar);
				}
				if(z==1)
				{
				floatToStr(TipChar, b, 2);
				floatToStr(AmountChar, c, 2);
				setFieldText (TotalTipField, TipChar);
				setFieldText (AmountField, AmountChar);
				}
	}
