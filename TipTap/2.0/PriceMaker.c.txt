#define appCreator 'nick'
#define appPrefID 2
#define appPrefVersion 2
#include "FloatLib.h"
#define MainForm		1000
#define AboutForm 1100
#define LicenseForm	1150
#define ManualForm	1250
#define PrefForm	8200
#define WTaxField 1460
#define AmountField 1300
#define TipField 1450
#define IVAinField 1420
#define IVAricField 1430
#define TotalTipField 1400
#define TotalField 1350
#define TipPercList 1101
#define TipPerPopUp 1102
#define TaxPopUp 1802
#define TaxList 1801
#define ScPercList 1103
#define ScPerPopUp 1104
#define ScField 1105
#define ScontoField 1106
#define MarScField 1108
#define MarScCurrField 1109
#define RetTaxMainField 1110
#define ProfCalcField 1112
#define IVAScField 1107
#define RicField 1950
#define TotalRicField 1900
#define ConvBtn	1500
#define ResetBtn 1750
#define AboutAlert 2000
#define ManualMenuAbout 3000
#define WarningAlert 2210
#define Warning2Alert 2220
#define OptionsMenuAbout 2000
#define CloseAboutMenuBtn 1120
#define LicenseBtn 1121
#define LicenseCloseBtn 1160
#define LicenseField 1170
#define ManualCloseBtn 1260
#define ManualField 1270
#define PreferencesMenu 8100
#define KeyboardMenu 9999
#define GraffitiMenu 9998
#define CurrencyList 8211
#define CurrencyPopUp 8212
#define CurrField 8214
#define DiscProfPopUp 8520
#define DiscProfList 8521
#define DiscProfField 8522
#define ClosePrefBtn 8210
#define ResetPrefBtn 8510
#define RetTaxPopUp 8620
#define RetTaxList 8621
#define RetTaxField 8622
#define ProfPopUp 8720
#define ProfList 8721
#define ProfField 8722
#define listM 40
#define listM2 28
#define listC 4
#define listT 2


typedef enum { 
	nfCommaPeriod, 
	nfPeriodComma, 
 	nfSpaceComma, 
 	nfApostrophePeriod, 
 	nfApostropheComma 
	} NumberFormatType;
	
typedef enum 
	{
	kbdAlpha = 0, 
	kbdNumbersAndPunc = 1, 
	kbdAccent = 2,
	kbdDefault = 0xff	
	} KeyboardType;
	
typedef enum 
	{
	referenceDefault = 0xff	
	} ReferenceType;

// Prototypes

static char	AmountChar[20];
static char localizedNum[20]; 
static char	TipChar[20];
static char TotalChar[20];
static char RicChar[20];
static char	ScChar[20];
static char	IVAScChar[20];
static char	MarScChar[20];
static char	IVAricChar[20];
static char	IVAinChar[20];
static char CurrChar[10];
static char	WTaxChar[10];
static char RetTaxMainChar[10];
static char ProfCalcChar[10];

double AmountFl, AmountFl2, WTaxFl,TotalFl, TipFl, RicFl, ScFl;
double g,b1,b2,bt, b3,b4,b5,b6,b7,b8,h,c, sc ;	
double MaxNumber=2000000000.0;
void conversion(void);
void display(void);
double DiscProf(double a, double b);
static void MaxNumberCheck(void);
static void DispResults(void);
static void CheckVoidField(UInt32 a, char *b);
static void CheckAmountField(int a);	
void ZeroFields(void);

//void initMath();  
	
NumberFormatType numFormat; 
Char thousandsSeparator, decimalSeparator; 


UInt32 PrefGetPreference(NumberFormatType prefNumberFormat)
SYS_TRAP(sysTrapPrefGetPreference);
void LocGetNumberSeparators (NumberFormatType prefnumberFormat, Char *thousandSeparator, Char *decimalSeparator)
SYS_TRAP(sysTrapLocGetNumberSeparators);
CharPtr StrDelocalizeNumber (CharPtr s, Char thousandSeparator, Char decimalSeparator)
SYS_TRAP(sysTrapStrDelocalizeNumber);


static Boolean	appHandleEvent (EventPtr event);
static void	mainFormInit (FormPtr form);
static Boolean	mainFormEventHandler (EventPtr event);
static void	AboutFormInit (FormPtr form);
static Boolean	AboutFormEventHandler (EventPtr event);
static Boolean	LicenseFormEventHandler (EventPtr event);
static void	LicenseFormInit (FormPtr form);
static Boolean	ManualFormEventHandler (EventPtr event);
static void	ManualFormInit (FormPtr form);	
static void	PrefFormInit (FormPtr form);
static Boolean	PrefFormEventHandler (EventPtr event);

void LstDrawList (ListType *listP) SYS_TRAP(sysTrapLstDrawList);
void LstSetDrawFunction (ListType *listP, ListDrawDataFuncPtr func) 
	SYS_TRAP(sysTrapLstSetDrawFunction);
void WinDrawTruncChars (Char *c, int i, int x, int y, int w)
	SYS_TRAP(sysTrapWinDrawTruncChars);	
void SysKeyboardDialog (KeyboardType kbd)
	SYS_TRAP(sysTrapSysKeyboardDialog);
void SysGraffitiReferenceDialog (ReferenceType referenceType)
	SYS_TRAP(sysTrapSysGraffitiReferenceDialog);


	//void termMath();
	
typedef struct { 
   	char Amount[50];
	char Tax[50];
	char Marg[50];
	char Disc[50];
	int Curr;
	int DiscProf;
	int RetTax;
	int Prof;
	int z;
	
	} PriceMakerPreferenceType; 
	
PriceMakerPreferenceType Prefs; 
	
static char	*listPercM[listM]= {"0","1","2","3","4","5",
						"6","7","8","9","10",
						"11","12","13","14",
						"15","16","17","18",
						"19","20","21","22","23",
						"24","25","30","35","40",
						"45","50","55","60","65","70",
						"75","80","85","90","95"};

static char	*listTaxM[listM2]= {"0","1","2","3","4","5","5.5",
						"6","7","8","9","10",
						"11","12","13","14",
						"15","16","17","18",
						"19","19.6","20","21","22","23",
						"24","25"};

static char	*listCurr[listC]= {"$","€","£","¥"};

static char	*listProf[listT]= {"retail (R)", "wholesale (W)"};

static char	*listDiscProf[listT]= {"amount", "percentage"};

static char	*listRetTax[listT]= {"before tax (BT)", "after tax (AT)"};


void	drawTipListM	(Int16 i, RectangleType	*bounds, Char **items)
	{
WinDrawTruncChars (listPercM[i], StrLen(listPercM[i]), bounds->topLeft.x, bounds->topLeft.y, bounds->extent.x);
	}

	void	setupListTipM(int lIndex)
	{
		FormPtr pForm	= FrmGetActiveForm();
		void	*pList	= getObjectPtr(pForm, lIndex);
		LstSetListChoices (pList, 0, listM);
		LstSetDrawFunction (pList, (ListDrawDataFuncPtr) drawTipListM);
	}

void	drawTaxListM	(Int16 i, RectangleType	*bounds, Char **items)
	{
WinDrawTruncChars (listTaxM[i], StrLen(listTaxM[i]), bounds->topLeft.x, bounds->topLeft.y, bounds->extent.x);
	}

	void	setupListTaxM(int lIndex)
	{
		FormPtr pForm	= FrmGetActiveForm();
		void	*pList	= getObjectPtr(pForm, lIndex);
		LstSetListChoices (pList, 0, listM2);
		LstSetDrawFunction (pList, (ListDrawDataFuncPtr) drawTaxListM);
	}
	
void	drawListCurr	(Int16 i, RectangleType	*bounds, Char **items)
	{
WinDrawTruncChars (listCurr[i], StrLen(listCurr[i]), bounds->topLeft.x, bounds->topLeft.y, bounds->extent.x);
	}

	void	setupListCurr(int lIndex)
	{
		FormPtr pForm	= FrmGetActiveForm();
		void	*pList	= getObjectPtr(pForm, lIndex);
		LstSetListChoices (pList, 0, listC);
		LstSetDrawFunction (pList, (ListDrawDataFuncPtr) drawListCurr);
	}

void	drawListDiscProf	(Int16 i, RectangleType	*bounds, Char **items)
	{
WinDrawTruncChars (listDiscProf[i], StrLen(listDiscProf[i]), bounds->topLeft.x, bounds->topLeft.y, bounds->extent.x);
	}
void	setupListDiscProf(int lIndex)
	{
		FormPtr pForm	= FrmGetActiveForm();
		void	*pList	= getObjectPtr(pForm, lIndex);
		LstSetListChoices (pList, 0, listT);
		LstSetDrawFunction (pList, (ListDrawDataFuncPtr) drawListDiscProf);
	}

void	drawListRetTax	(Int16 i, RectangleType	*bounds, Char **items)
	{
WinDrawTruncChars (listRetTax[i], StrLen(listRetTax[i]), bounds->topLeft.x, bounds->topLeft.y, bounds->extent.x);
	}
void	setupListRetTax(int lIndex)
	{
		FormPtr pForm	= FrmGetActiveForm();
		void	*pList	= getObjectPtr(pForm, lIndex);
		LstSetListChoices (pList, 0, listT);
		LstSetDrawFunction (pList, (ListDrawDataFuncPtr) drawListRetTax);
	}

void	drawListProf	(Int16 i, RectangleType	*bounds, Char **items)
	{
WinDrawTruncChars (listProf[i], StrLen(listProf[i]), bounds->topLeft.x, bounds->topLeft.y, bounds->extent.x);
	}
void	setupListProf(int lIndex)
	{
		FormPtr pForm	= FrmGetActiveForm();
		void	*pList	= getObjectPtr(pForm, lIndex);
		LstSetListChoices (pList, 0, listT);
		LstSetDrawFunction (pList, (ListDrawDataFuncPtr) drawListProf);
	}


	/*
	 * startApp and stopApp are here for future reference.  They clearly 
	 * don't do anything for this program, but it's a good idea to do 
	 * program clean-up and shutdown in these files.  One thing that 
	 * typically goes here is database opening and closing.
	 */

	static void	startApp()	
	{
	UInt16 sizePrefs = sizeof( PriceMakerPreferenceType );
	Int16 rc;	
	rc=PrefGetAppPreferences(appCreator, appPrefID,(void*)(&Prefs), &sizePrefs, true);
	
	if (rc == noPreferenceFound) 
	{StrCopy( Prefs.Amount, "");
	StrCopy( Prefs.Tax, "20");
	StrCopy(Prefs.Marg, "30");
	StrCopy(Prefs.Disc, "0");
	Prefs.Curr=0;
	Prefs.DiscProf=0;
	Prefs.Prof=0;
	Prefs.z=0;
	Prefs.Prof=0;}
			return;}

	static void	stopApp()	
	{
	/*if(FormCheck==1)
		{FrmGotoForm(MainForm);
		break;}
		CheckAmountField(0);
		
		getFieldText(TipField, Prefs.Tax);
		getFieldText(RicField, Prefs.Marg);
		getFieldText(ScontoField, Prefs.Disc);
	*/
	PrefSetAppPreferences (appCreator, appPrefID,  appPrefVersion, &Prefs, sizeof (Prefs), true); 
		return;}

	/*
	 * A Palm program starts at the PilotMain function -- you can use 
	 * this example verbatim for most (maybe all) your Palm applications.  
	 * Some other examples might separate the event loop into a separate 
	 * function but we've combined the two, here.  This function does 
	 * the following.
	 *
	 *	o  calls startApp, 
	 *	o  initiates the first form, 
	 *	o  handles the event loop, 
	 *	o  cleans-up (when it gets the 'leaving now' event), and 
	 *	o  leaves.
	 */


		DWord
	PilotMain(Word cmd, char *cmdPBP, Word launchFlags)
	{
		EventType	event;
		Word		error;
		if (cmd == sysAppLaunchCmdNormalLaunch) 
		{
			startApp();
			//initMath();
			/*
			 * FrmGotForm generates a frmLoadEvent that'll get 
			 * handled as soon as we have an event handler that 
			 * knows what to do with it.
			 */

			FrmGotoForm(MainForm);

LocGetNumberSeparators((NumberFormatType) PrefGetPreference(nfSpaceComma) , &thousandsSeparator, &decimalSeparator); 

			/*
			 * This loop gets events, handles the events, and 
			 * checks to see if we've got a 'done' event.
			 */

			do 
			{
				/*
				 * Wait for an event (we already generated the 
				 * first one).
				 */

				EvtGetEvent(&event, evtWaitForever);

				/*
				 * Then, ask the system, the menu system, 
				 * and our *OWN* event handlers (one for the 
				 * application as a whole and one for the 
				 * current form) to deal with the event.
				 */

				if (!SysHandleEvent (&event))
				if (!MenuHandleEvent (0, &event, &error))
				if (!appHandleEvent (&event))
					FrmDispatchEvent (&event);

			} while (event.eType != appStopEvent);

			/*
			 * When we're done, shut down
			 */
			//termMath();	
			stopApp();
			FrmCloseAllForms();
		}
		return 0;
	}

	/*
	 * This is the top-level event handler for the entire application.  
	 * Here, we handle form load events and our menu events.
	 */


		static Boolean 
	appHandleEvent (EventPtr event) 
	{
		FormPtr	frm;
		Int	formId;
		Boolean	handled = false;
		
		if (event->eType == frmLoadEvent) 
		{
			/*
			* Load the resource for the form
			*/

			formId	= event->data.frmLoad.formID;
			frm	= FrmInitForm(formId);

			FrmSetActiveForm(frm);

			/*
			* install a form-specific event handler
			*/

			if (formId == MainForm)
				FrmSetEventHandler (frm, mainFormEventHandler);
			if (formId == AboutForm)
				FrmSetEventHandler (frm, AboutFormEventHandler);			
			if (formId == LicenseForm)
				FrmSetEventHandler (frm, LicenseFormEventHandler);
			if (formId == ManualForm)
				FrmSetEventHandler (frm, ManualFormEventHandler);
			if (formId == PrefForm)
				FrmSetEventHandler (frm, PrefFormEventHandler);

			// *** ADD NEW FORM HANDLING HERE *** //
			

			handled = true;
		}       
		return handled;
	}


	/*
	 * This is the event handler for the main form.  It handles all of 
	 * the user interactions with the user interface objects (e.g., 
	 * buttons, lists, text fields, and such) on the main form.
	 */


		static Boolean
	mainFormEventHandler(EventPtr event)
	{
		Boolean	handled	= false;
		FormPtr	frmP	= FrmGetActiveForm();
		switch (event->eType) 
		{

		/*
		 * the first event received by a form's event handler is
		 * the frmOpenEvent.  
		 */

		case frmOpenEvent:
			FrmDrawForm(frmP);
			mainFormInit(frmP);
			handled = true;
			break;  
		case menuEvent:
			handled=doMenu(frmP, event->data.menu.itemID);
			break;
		
		case fldEnterEvent:
                      	switch(event->data.fldEnter.fieldID)
			{	
			case AmountField:
			{
			Prefs.z=0;
			setFieldText (AmountField, "");
			setFieldText (WTaxField, " 0,00");
			setFieldText (TotalField, " 0,00");
			FrmSetFocus(frmP, FrmGetObjectIndex(frmP, AmountField));
			ZeroFields();
			handled = true;
			break;}

			case TotalField:
			{Prefs.z=1;
			setFieldText (TotalField, "");
			setFieldText (WTaxField, " 0,00");
			setFieldText (AmountField, " 0,00");
			FrmSetFocus(frmP, FrmGetObjectIndex(frmP, TotalField));
			ZeroFields();
						
			handled = true;
			break;}
			
			case WTaxField:
			{Prefs.z=2;
			setFieldText (WTaxField, "");
			setFieldText (AmountField, " 0,00");
			setFieldText (TotalField, " 0,00");
			FrmSetFocus(frmP, FrmGetObjectIndex(frmP, WTaxField));
			ZeroFields();
			handled = true;
			break;}

			case TipField:
			{getFieldText(TipField, Prefs.Tax);
			setFieldText (TipField, "");
			FrmSetFocus(frmP, FrmGetObjectIndex(frmP, TipField));
			handled = true;
			break;}
			
			case RicField:
			{getFieldText(RicField, Prefs.Marg);
			setFieldText (RicField, "");
			FrmSetFocus(frmP, FrmGetObjectIndex(frmP, RicField));
			handled = true;
			break;}
			
			case ScontoField:
			{
			getFieldText(ScontoField, Prefs.Disc);
			setFieldText (ScontoField, "");
			FrmSetFocus(frmP, FrmGetObjectIndex(frmP, ScontoField));
			handled = true;
			break;}


			break;
			}	
		
		// *** ADD EVENT HANDLING HERE *** //
		case ctlSelectEvent:
			switch(event->data.ctlSelect.controlID)
			{
			case	ConvBtn:
				{
				conversion();
				if(c>MaxNumber)	
					{MaxNumberCheck();
					handled = true;
					break;}	
				display();
				handled = true;
				break;
				}
			
			case ResetBtn:
			{	Prefs.z=0;
				setFieldText (AmountField, "");
				setFieldText (TotalField, " 0,00");
				setFieldText (WTaxField, " 0,00");
				FrmSetFocus(frmP, FrmGetObjectIndex(frmP, AmountField));
				ZeroFields();
				setupListTipM(TipPercList);
				StrCopy(Prefs.Amount, "");
				//h=30.0;
				//g=20.0;
				//sc=0.0;
			}
			}


		break;

//LISTS
		case popSelectEvent:
			{int	i	= event->data.popSelect.selection;
			switch (event->data.popSelect.controlID)
			{
			case TipPerPopUp:
				{				
				setFieldText(RicField, listPercM[i]);
			
				conversion();
				if(c>MaxNumber)	
					{MaxNumberCheck();
					handled = true;
					break;}	
				
				display();
				handled = true;
				break;
				}



			case ScPerPopUp:
				{			
				setFieldText(ScontoField, listPercM[i]);
				conversion();
				if(c>MaxNumber)	
					{MaxNumberCheck();
					handled = true;
					break;}	
				display();
				handled = true;
				break;
				}


			case TaxPopUp:
				{			
				setFieldText(TipField, listTaxM[i]);
				conversion();
				if(c>MaxNumber)	
					{MaxNumberCheck();
					handled = true;
					break;}	
				display();
				handled = true;
				break;
				}
			break;
			}

//other buttons...

			}
		}
		return handled;
	}

	/*
	 * This is the startup code for the form.  Here, we write our message 
	 * to the screen.
	 */

		static void 
	mainFormInit (FormPtr frmP)
	{	Boolean	handled	= false;
		setupListTipM(TipPercList);
		setupListTipM(ScPercList);
		setupListTaxM(TaxList);
				
		CheckAmountField(1);
		setFieldText (TipField, Prefs.Tax);
		setFieldText (RicField, Prefs.Marg);
		setFieldText (ScontoField, Prefs.Disc);
		
		//FormCheck=0;
		conversion();
		if(c>MaxNumber)	
			{MaxNumberCheck();
			handled = true;
			break;}
				
			display();
	

		// *** ADD FORM INITIALIZATION HERE *** //
		
	}


static void 
	AboutFormInit (FormPtr frmP)
	{
		
		// *** ADD FORM INITIALIZATION HERE *** //
		
	}

static void 
	LicenseFormInit (FormPtr frmP)
	{		
		MemHandle t=DmGetResource('tSTR', 2000);
	   	static Char    *foo    = (static Char *) MemHandleLock(t);
   		setFieldText(LicenseField, foo);
   		 //MemHandleUnlock (t);
	     DmReleaseResource(t);	
	}

static void 
	ManualFormInit (FormPtr frmP)
	{
		MemHandle t=DmGetResource('tSTR', 2100);
		static Char    *foo    = (static Char *) MemHandleLock(t);
   		setFieldText(ManualField, foo);
   		 //MemHandleUnlock (t);
		DmReleaseResource(t);
	}

static void PrefFormInit (FormPtr frmP)
	{
	setupListCurr(CurrencyList);
	setFieldText (CurrField, listCurr[Prefs.Curr]);
	
	setupListProf(ProfList);
	setFieldText(ProfField, listProf[Prefs.Prof]);	

	setupListDiscProf(DiscProfList);
	setFieldText(DiscProfField, listDiscProf[Prefs.DiscProf]);	
	
	setupListRetTax(RetTaxList);
	setFieldText(RetTaxField, listRetTax[Prefs.RetTax]);	

	}

static Boolean
	AboutFormEventHandler(EventPtr event)
	{
		Boolean	handled	= false;
		FormPtr	frmP	= FrmGetActiveForm();
		switch (event->eType) 
		{

		/*
		 * the first event received by a form's event handler is
		 * the frmOpenEvent.  
		 */

		case frmOpenEvent:
			FrmDrawForm(frmP);
			AboutFormInit(frmP);
			handled = true;
			break;  
		
		
		// *** ADD EVENT HANDLING HERE *** //
//BUTTONS
		case ctlSelectEvent:
			switch(event->data.ctlSelect.controlID)
			{
			case	CloseAboutMenuBtn:
			{	FrmGotoForm(MainForm);
				handled = true;
				break;
			}
			//other buttons...
			case	LicenseBtn:
			{	FrmGotoForm(LicenseForm);
				handled = true;
				break;
			}
			}
			break;
}
return handled;
}


static Boolean
	LicenseFormEventHandler(EventPtr event)
	{
		Boolean	handled	= false;
		FormPtr	frmP	= FrmGetActiveForm();
		switch (event->eType) 
		{

		/*
		 * the first event received by a form's event handler is
		 * the frmOpenEvent.  
		 */

		case frmOpenEvent:
			FrmDrawForm(frmP);
			LicenseFormInit(frmP);
			handled = true;
			break;  
		
		
		// *** ADD EVENT HANDLING HERE *** //
//BUTTONS
		case ctlSelectEvent:
			switch(event->data.ctlSelect.controlID)
			{
			case	LicenseCloseBtn:
			{	FrmGotoForm(AboutForm);
				handled = true;
				break;
			}
			//other buttons...
			
			}
			break;
}
return handled;
}


static Boolean
	ManualFormEventHandler(EventPtr event)
	{
		Boolean	handled	= false;
		FormPtr	frmP	= FrmGetActiveForm();
		switch (event->eType) 
		{

		/*
		 * the first event received by a form's event handler is
		 * the frmOpenEvent.  
		 */

		case frmOpenEvent:
			FrmDrawForm(frmP);
			ManualFormInit(frmP);
			handled = true;
			break;  
		
		
		// *** ADD EVENT HANDLING HERE *** //
//BUTTONS
		case ctlSelectEvent:
			switch(event->data.ctlSelect.controlID)
			{
			case	ManualCloseBtn:
			{	FrmGotoForm(MainForm);
				handled = true;
				break;
			}
			//other buttons...
			
			}
			break;
}
return handled;
}



static Boolean
	PrefFormEventHandler(EventPtr event)
	{
		Boolean	handled	= false;
		FormPtr	frmP	= FrmGetActiveForm();
		switch (event->eType) 		{

		/*
		 * the first event received by a form's event handler is
		 * the frmOpenEvent.  
		 */

		case frmOpenEvent:
			FrmDrawForm(frmP);
			PrefFormInit(frmP);
			handled = true;
			break;  
		
	/*case fldEnterEvent:
                      	switch(event->data.fldEnter.fieldID)
			{	
		case LowTipField:
			{StrCopy(Prefs.LowTip, LowTipChar);
			setFieldText (LowTipField, "");
			handled = true;
			break;}	

			break;}
	*/


		// *** ADD EVENT HANDLING HERE *** //
//BUTTONS
	case ctlSelectEvent:
		switch(event->data.ctlSelect.controlID)
			{
		case	ClosePrefBtn:
			{	FrmGotoForm(MainForm);
				handled = true;
				break;
			}
			//other buttons...
			case ResetPrefBtn:
			{	setFieldText(CurrField, listCurr[0]);
				setFieldText(ProfField, listProf[0]);
				setFieldText(DiscProfField, listDiscProf[0]);
				setFieldText(RetTaxField, listRetTax[0]);
				Prefs.Curr=0;
				Prefs.DiscProf=0;
				Prefs.RetTax=0;
				handled = true;
				break;

			}		
	}
			break;
			

	case popSelectEvent:
		{int	i	= event->data.popSelect.selection;

	switch (event->data.popSelect.controlID)
		{
		case CurrencyPopUp:
			{setFieldText(CurrField, listCurr[i]);
			Prefs.Curr=i;
			handled = true;
			break;}
		
		case ProfPopUp:
			{
			setFieldText(ProfField, listProf[i]);
			Prefs.Prof=i;
			handled = true;
			break;}

			
		case DiscProfPopUp:
			{
			setFieldText(DiscProfField, listDiscProf[i]);
			Prefs.DiscProf=i;
			handled = true;
			break;}
			
		case RetTaxPopUp:
			{
			setFieldText(RetTaxField, listRetTax[i]);
			Prefs.RetTax=i;
			handled = true;
			break;}

			}
			}

			break;
}
return handled;
}




//*************************************************************************
//  Routines necessary for MathLib
//**************************************************************************

/*
void initMath() {
Err err;
err = SysLibFind("MathLib", &MathLibRef);
if (err != 0) { // library not loaded already
    err = SysLibLoad('libr', 'MthL', &MathLibRef);
    if (err == 0)
        err = MathLibOpen (MathLibRef, 1);
    }
}
void termMath() {
if (MathLibRef != -1) {
    Err err;
    UInt usecount;
    err = MathLibClose (MathLibRef, &usecount);
    if (usecount == 0)
        SysLibRemove (MathLibRef);
    }
}

*/
//*************************************************************************
static Boolean	doMenu(FormPtr frmP, Word command)
{
	Boolean handled = false;
	switch (command) {
			case OptionsMenuAbout:
				CheckVoidField(TipField, Prefs.Tax);
				CheckVoidField(RicField, Prefs.Marg);
				CheckVoidField(ScontoField, Prefs.Disc);
				CheckAmountField(0);
				FrmGotoForm(AboutForm);
				//FormCheck=1;
				handled = true;
				break;

			case PreferencesMenu:
				CheckVoidField(TipField, Prefs.Tax);
				CheckVoidField(RicField, Prefs.Marg);
				CheckVoidField(ScontoField, Prefs.Disc);
				CheckAmountField(0);
				FrmGotoForm(PrefForm);
				//FormCheck=1;
				handled = true;
				break;

			case ManualMenuAbout:
				CheckVoidField(TipField, Prefs.Tax);
				CheckVoidField(RicField, Prefs.Marg);
				CheckVoidField(ScontoField, Prefs.Disc);
				CheckAmountField(0);
				FrmGotoForm(ManualForm);
				//FormCheck=1;
				handled = true;
				break;

			case KeyboardMenu:
			SysKeyboardDialog(kbdNumbersAndPunc);
			handled = true;
			break;

			case GraffitiMenu:
			SysGraffitiReferenceDialog(referenceDefault);
			handled = true;
			break;


}

	return handled;
}
void conversion(void)
			{	FlpCompDouble TipFloat;
				FlpCompDouble RicFloat;
				FlpCompDouble ScontoFloat;
   				
				getFieldText (TipField,localizedNum);
				TipFloat.fd = FlpAToF(StrDelocalizeNumber(localizedNum,  thousandsSeparator,decimalSeparator));  
				TipFl = TipFloat.d;
				g=TipFl;
								
				getFieldText (RicField,localizedNum);
				RicFloat.fd = FlpAToF(StrDelocalizeNumber(localizedNum,  thousandsSeparator,decimalSeparator));  
				RicFl = RicFloat.d;
				h=RicFl;
				
				getFieldText (ScontoField,localizedNum);
				ScontoFloat.fd = FlpAToF(StrDelocalizeNumber(localizedNum,  thousandsSeparator,decimalSeparator));  
				ScFl = ScontoFloat.d;
				sc=ScFl;


	if(Prefs.z==0)
		{
				FlpCompDouble AmountFloat;
				getFieldText (AmountField,localizedNum);
				AmountFloat.fd = FlpAToF(StrDelocalizeNumber(localizedNum,  thousandsSeparator,decimalSeparator));  
				AmountFl = AmountFloat.d;
							
		if(Prefs.Prof==0)
			{
				b3=AmountFl/(1-h/100);
				b2=b3-AmountFl;
				c=b3*(1+g/100);
				b1=c-b3;
				b4=AmountFl*(g/100);
				b5=b1-b4;
				b6=c*(1-sc/100.0);
				b8=b1*(1-sc/100.0);  //disc tax
				bt=b6-b8;            //disc price - taxes
				b7=DiscProf(bt, AmountFl);
			}
					
		if(Prefs.Prof==1)
			{	b2=AmountFl*(h/100);
				b3=AmountFl+b2;
				b1=b3*(g/100);
				b4=AmountFl*(g/100);
				b5=b1-b4;
				c=AmountFl+b2+b1;
				b6=c*(1-sc/100.0);
				b8=b1*(1-sc/100.0);  //disc tax
				bt=b6-b8;            //disc price - taxes
				b7=DiscProf(bt, AmountFl);
			}
				
		}
				
	if(Prefs.z==1)
		{
				FlpCompDouble TotalFloat;
				getFieldText (TotalField,localizedNum);
				TotalFloat.fd = FlpAToF(StrDelocalizeNumber(localizedNum,
						  thousandsSeparator,decimalSeparator));  

				//TotalFloat.fd = FlpAToF(TotalChar);
				TotalFl = TotalFloat.d;
				
		if(Prefs.Prof==0)
			{	
			b1=TotalFl*(1-1/(1+g/100));
			if(Prefs.RetTax==0)
				{
				b2=(TotalFl-b1)*(h/100);
				c=TotalFl-b1-b2;
				}
			if(Prefs.RetTax==1)
				{
				b2=TotalFl*(h/100);
				c=TotalFl-b2;
				}

				b4=c*g/100;
				b5=b1-b4;
				b6=TotalFl*(1-sc/100);
				b8=b1*(1-sc/100.0);  //disc tax
				bt=b6-b8;            //disc price - taxes
				b7=DiscProf(bt, c);
			}
				
				
		if(Prefs.Prof==1)
			{	b3=TotalFl/(1+g/100);
				b1=TotalFl-b3;

				
			if(Prefs.RetTax==0)
				{c=b3/(1+h/100);
				b2=TotalFl-b1-c;}

			if(Prefs.RetTax==1)
				{c=TotalFl/(1+h/100);
				b2=TotalFl-c;}

				b4=c*g/100;
				b5=b1-b4;	
				b6=TotalFl*(1-sc/100);
				b8=b1*(1-sc/100.0);  //disc tax
				bt=b6-b8;            //disc price - taxes
				b7=DiscProf(bt, c);}
		}

	if(Prefs.z==2)
		{
				FlpCompDouble WTaxFloat;
				getFieldText (WTaxField,localizedNum);
				
				WTaxFloat.fd = FlpAToF(StrDelocalizeNumber(localizedNum,
						  thousandsSeparator,decimalSeparator));  

				WTaxFl = WTaxFloat.d;


		if(Prefs.Prof==0)
			{	AmountFl2 = WTaxFl/(1+g/100);
				b3=AmountFl2/(1-h/100);
				b2=b3-AmountFl2;
				c=b3*(1+g/100);
				b1=c-b3;
				b4=AmountFl2*(g/100);
				b5=b1-b4;
				b6=c*(1-sc/100.0);
				b8=b1*(1-sc/100.0);  //disc tax
				bt=b6-b8;            //disc price - taxes
				b7=DiscProf(bt, AmountFl2);		
			}

		if (Prefs.Prof==1)
			{	AmountFl2 = WTaxFl/(1+g/100);
				b2=AmountFl2*(h/100);
				b3=AmountFl2+b2;
				b1=b3*(g/100);
				b4=AmountFl2*(g/100);
				b5=b1-b4;
				c=AmountFl2+b2+b1;
				b6=c*(1-sc/100.0);
				b8=b1*(1-sc/100.0);  //disc tax
				bt=b6-b8;            //disc price - taxes
				b7=DiscProf(bt, AmountFl2);
			}

		}
	//return b1;
	}	

	void display(void)
	{		if(b7<0)
				{UInt16 alertSelection = FrmAlert(Warning2Alert);
				setFieldText(ScontoField, "--");
				setFieldText (ScField, "--");
				setFieldText (MarScField, "--");
				setFieldText (IVAScField, "--");
				//sc=0.0;
				break;}

			if(Prefs.z==0)
				{ 
				//floatToStr(WTaxChar, AmountFl+b1, 2);
				floatToStr(WTaxChar, AmountFl+b4, 2);
				floatToStr(TipChar, b1, 2);
				floatToStr(RicChar, b2, 2);
				floatToStr(IVAricChar, b4, 2);
				floatToStr(IVAinChar, b5, 2);
				floatToStr(MarScChar, b7, 2);
				floatToStr(IVAScChar, b8, 2);
				if(Prefs.RetTax==0)
				{floatToStr(TotalChar, c, 2);
				floatToStr(ScChar, b6, 2);}
				if(Prefs.RetTax==1)
				{floatToStr(TotalChar, b3, 2);
				floatToStr(ScChar, bt, 2);}

				setFieldText (WTaxField, WTaxChar);
				setFieldText (TotalField, TotalChar);
				DispResults();
				}

			if(Prefs.z==1)
				{
				//floatToStr(WTaxChar, c+b1, 2);
				floatToStr(WTaxChar, c+b4, 2);
				floatToStr(TipChar, b1, 2);
				floatToStr(RicChar, b2, 2);
				floatToStr(IVAricChar, b4, 2);
				floatToStr(IVAinChar, b5, 2);
				floatToStr(ScChar, b6, 2);
				floatToStr(AmountChar, c, 2);
				floatToStr(MarScChar, b7, 2);
				floatToStr(IVAScChar, b8, 2);

				if(Prefs.RetTax==0)
				{floatToStr(ScChar, b6, 2);}
				if(Prefs.RetTax==1)
				{floatToStr(ScChar, bt, 2);}
				
				setFieldText (WTaxField, WTaxChar);
				setFieldText (AmountField, AmountChar);
				DispResults();
				}

			if(Prefs.z==2)
				{
				//floatToStr(TotalChar, c, 2);
				floatToStr(TipChar, b1, 2);
				floatToStr(RicChar, b2, 2);
				floatToStr(IVAricChar, b4, 2);
				floatToStr(IVAinChar, b5, 2);
				floatToStr(ScChar, b6, 2);
				//floatToStr(AmountChar, AmountFl2, 2);
				floatToStr(MarScChar, b7, 2);
				floatToStr(IVAScChar, b8, 2);
				
				if(Prefs.RetTax==0)
				{floatToStr(TotalChar, c, 2);
				floatToStr(AmountChar, AmountFl2, 2);
				floatToStr(ScChar, b6, 2);}
				if(Prefs.RetTax==1)
				{floatToStr(TotalChar, b3, 2);
				floatToStr(AmountChar, AmountFl2, 2);
				floatToStr(ScChar, bt, 2);}
				

				setFieldText (TotalField, TotalChar);
				setFieldText (AmountField, AmountChar);
				DispResults();
				}

}

//Routines

static void MaxNumberCheck(void)
	{
	UInt16 alertSelection = FrmAlert(WarningAlert);
	setFieldText (AmountField, "");
	setFieldText (TotalField, " 0,00");
	setFieldText (WTaxField, " 0,00");
	FrmSetFocus(FrmGetActiveForm(), FrmGetObjectIndex(FrmGetActiveForm(), AmountField));
	ZeroFields();
	}


double DiscProf(double a, double b)
	{ 
	double c;
	if(Prefs.DiscProf==0)
		{c=a-b;}
	if(Prefs.DiscProf==1)
		{if(a==0.0)
			{c=0.0;}
		else
			{c=100.0*(a-b)/a;}
		}
	return c;
	}	

static void DispResults(void)
	{
	setFieldText (TotalTipField, TipChar);
	setFieldText (TotalRicField, RicChar);
	setFieldText (IVAricField, IVAricChar);				
	setFieldText (IVAinField, IVAinChar);
	setFieldText (ScField, ScChar);
	setFieldText (MarScField, MarScChar);
	setFieldText (IVAScField, IVAScChar);

	StrCopy(ProfCalcChar, "");
	if(Prefs.Prof==0)
		{StrCat(ProfCalcChar, "(R)");}
	if(Prefs.Prof==1)
		{StrCat(ProfCalcChar, "(W)");}
	setFieldText (ProfCalcField, ProfCalcChar);

	StrCopy(CurrChar, "(");
	if(Prefs.DiscProf==0)
		{StrCat(CurrChar, listCurr[Prefs.Curr]);}
	if(Prefs.DiscProf==1)
		{StrCat(CurrChar, "%");}
	StrCat(CurrChar, ")");
	setFieldText (MarScCurrField, CurrChar);

	StrCopy(RetTaxMainChar, "");
	if(Prefs.RetTax==0)
		{StrCat(RetTaxMainChar, "(BT)");}
	if(Prefs.RetTax==1)
		{StrCat(RetTaxMainChar, "(AT)");}
	setFieldText (RetTaxMainField, RetTaxMainChar);
	}

static void CheckVoidField(UInt32 a, char *b)
	{char c[50];
	getFieldText(a, c);
	if(StrCompare(c, "")!=0)
		{StrCopy(b,c);}
	}

static void CheckAmountField(int a)
	{
	if (a==0)
		{
		if(Prefs.z==0)
			getFieldText (AmountField, Prefs.Amount);
		if(Prefs.z==1)
			getFieldText (TotalField, Prefs.Amount);
		if(Prefs.z==2)
			getFieldText (WTaxField, Prefs.Amount);
		}
	if (a==1)
		{
		if(Prefs.z==0)
			setFieldText (AmountField, Prefs.Amount);
		if(Prefs.z==1)
			setFieldText (TotalField, Prefs.Amount);
		if(Prefs.z==2)
			setFieldText (WTaxField, Prefs.Amount);
		}
	
	}

void ZeroFields(void)
	{
	setFieldText (TotalTipField, " 0,00");
	setFieldText (TotalRicField, " 0,00");
	setFieldText (IVAricField, " 0,00");
	setFieldText (IVAinField, " 0,00");
	setFieldText (ScField, " 0,00");
	setFieldText (MarScField, " 0,00");
	setFieldText (IVAScField, " 0,00");
	}

