#define AppCreator 'HASn'
#include "FloatLib.h"
	#define MainForm		1000
	
	#define AboutForm 1100
	#define LicenseForm	1150
	#define ManualForm	1250
	#define TempField 1300
	#define EnergyField 1400
	#define LambdaField 1350
	#define KField 1360
	#define VelField 1370
	#define ConvBtn	1500
	#define ResetMenu 1750
	#define AboutAlert 2000
	#define ManualMenuAbout 3000
	#define WarningAlert 2200
	#define OptionsMenuAbout 2000
	#define CloseAboutMenuBtn 1110
	#define LicenseBtn 1112
	#define LicenseCloseBtn 1160
	#define LicenseField 1170
	#define ManualCloseBtn 1260
	#define ManualField 1270
	#define listM 59
	#define listMQ 350
	#define EnList 1101
	#define EnPopUp 1102
	#define TList 1103
	#define TPopUp 1104

	// Prototypes

	int a,d,z;
	static char		TempChar[150];
	static char		EnergyChar[150];
	static char		LambdaChar[150];
	static char		KChar[150];
	static char		VelChar[150];
	
	char zero[8]	=	" 0.0000";

	double TempFl, g,b,c, EnergyFl;
	double T,energyJ, lambdaA, energymeV, temperature, K, Vel;
	
	double MaxNumber=2000000000.0;
	double amu=1.6605E-27; //Kg
	double KB=1.38065E-23; //J/K
	double eV=1.602176462E-19;  //J
	double h=6.62606876E-34;  //J*s
	double PI=3.1415926535898;
	double LambdaToEmev=4.54206;

	double conversion();
	void display();

	double EnJToVel(double energyJ);
	double VelToEnJ(double Vel);
	double EnmeVToT(double energymeV);
	double EnJToLambda(double energyJ);
	double LambdaAToEnJ(double lambdaA);
	double EnJToEnmeV(double energyJ);
	double LK(double LK);

	
	void initMath();  
	
	static Boolean	appHandleEvent (EventPtr event);
	static void	mainFormInit (FormPtr form);
	static Boolean	mainFormEventHandler (EventPtr event);
	static void	AboutFormInit (FormPtr form);
	static Boolean	AboutFormEventHandler (EventPtr event);
	static Boolean	LicenseFormEventHandler (EventPtr event);
	static void	LicenseFormInit (FormPtr form);
	static Boolean	ManualFormEventHandler (EventPtr event);
	static void	ManualFormInit (FormPtr form);		
	void LstDrawList (ListType *listP) SYS_TRAP(sysTrapLstDrawList);
	void LstSetDrawFunction (ListType *listP, ListDrawDataFuncPtr func) 
		SYS_TRAP(sysTrapLstSetDrawFunction);
	void WinDrawTruncChars (Char *c, int i, int x, int y, int w)
		SYS_TRAP(sysTrapWinDrawTruncChars);	
	
	void termMath();
	
	static void MaxNumberCheck(void);
	static void Reset(void);
	

	static char	*listEnM[listM]= {"1","2","3","4","5","6","7","8","9",
						"10","11","12","13","14","15","16","17","18","19",
						"20","21","22","23","24","25","26","27","28","29",
						"30","31","32","33","34","35","36","37","38","39",
						"40","41","42","43","44","45","46","47","48","49",
						"50","55","60","65", "70","75", "80", "85", "90","95" };
	
	static char	*listTM[listMQ]= {"350","349","348","347","346","345","344","343","342","341","340","339","338","337","336","335",
						"334","333","332","331","330","329","328","327","326","325","324","323","322","321","320","319",
						"318","317","316","315","314","313","312","311","310","309","308","307","306","305","304","303",
						"302","301","300","299","298","297","296","295","294","293","292","291","290","289","288","287",
						"286","285","284","283","282","281","280","279","278","277","276","275","274","273","272","271",
						"270","269","268","267","266","265","264","263","262","261","260","259","258","257","256","255",
						"254","253","252","251","250","249","248","247","246","245","244","243","242","241","240","239",
						"238","237","236","235","234","233","232","231","230","229","228","227","226","225","224","223",
						"222","221","220","219","218","217","216","215","214","213","212","211","210","209","208","207",
						"206","205","204","203","202","201","200","199","198","197","196","195","194","193","192","191",
						"190","189","188","187","186","185","184","183","182","181","180","179","178","177","176","175",
						"174","173","172","171","170","169","168","167","166","165","164","163","162","161","160","159",
						"158","157","156","155","154","153","152","151","150","149","148","147","146","145","144","143",
						"142","141","140","139","138","137","136","135","134","133","132","131","130","129","128","127",
						"126","125","124","123","122","121","120","119","118","117","116","115","114","113","112","111",
						"110","109","108","107","106","105","104","103","102","101","100","99","98","97","96","95","94",
						"93","92","91","90","89","88","87","86","85","84","83","82","81","80","79","78","77","76","75",
						"74","73","72","71","70","69","68","67","66","65","64","63","62","61","60","59","58","57","56",
						"55","54","53","52","51","50","49","48","47","46","45","44","43","42","41","40","39","38","37",
						"36","35","34","33","32","31","30","29","28","27","26","25","24","23","22","21","20","19","18",
						"17","16","15","14","13","12","11","10","9","8","7","6","5","4","3","2","1"};
void	drawEnListM	(Int16 i, RectangleType	*bounds, Char **items)
	{
WinDrawTruncChars (listEnM[i], StrLen(listEnM[i]), bounds->topLeft.x, bounds->topLeft.y, bounds->extent.x);
	}

	void	setupListEnM(int lIndex)
	{
		FormPtr pForm	= FrmGetActiveForm();
		void	*pList	= getObjectPtr(pForm, lIndex);
		LstSetListChoices (pList, 0, listM);
		LstSetDrawFunction (pList, (ListDrawDataFuncPtr) drawEnListM);

		// Don't redraw the list
	}

void	drawTListM	(Int16 i, RectangleType	*bounds, Char **items)
	{
WinDrawTruncChars (listTM[i], StrLen(listTM[i]), bounds->topLeft.x, bounds->topLeft.y, bounds->extent.x);
	}

	void	setupListTM(int lIndex)
	{
		FormPtr pForm	= FrmGetActiveForm();
		void	*pList	= getObjectPtr(pForm, lIndex);
		LstSetListChoices (pList, 0, listMQ);
		LstSetDrawFunction (pList, (ListDrawDataFuncPtr) drawTListM);

		// Don't redraw the list
	}


	
	/*
	 * startApp and stopApp are here for future reference.  They clearly 
	 * don't do anything for this program, but it's a good idea to do 
	 * program clean-up and shutdown in these files.  One thing that 
	 * typically goes here is database opening and closing.
	 */

	static void	startApp()	{return;}
	static void	stopApp()	{return;}

	/*
	 * A Palm program starts at the PilotMain function -- you can use 
	 * this example verbatim for most (maybe all) your Palm applications.  
	 * Some other examples might separate the event loop into a separate 
	 * function but we've combined the two, here.  This function does 
	 * the following.
	 *
	 *	o  calls startApp, 
	 *	o  initiates the first form, 
	 *	o  handles the event loop, 
	 *	o  cleans-up (when it gets the 'leaving now' event), and 
	 *	o  leaves.
	 */


		DWord
	PilotMain(Word cmd, char *cmdPBP, Word launchFlags)
	{
		EventType	event;
		Word		error;
		if (cmd == sysAppLaunchCmdNormalLaunch) 
		{
			startApp();
			initMath();
			/*
			 * FrmGotForm generates a frmLoadEvent that'll get 
			 * handled as soon as we have an event handler that 
			 * knows what to do with it.
			 */

			FrmGotoForm(MainForm);

			/*
			 * This loop gets events, handles the events, and 
			 * checks to see if we've got a 'done' event.
			 */

			do 
			{
				/*
				 * Wait for an event (we already generated the 
				 * first one).
				 */

				EvtGetEvent(&event, evtWaitForever);

				/*
				 * Then, ask the system, the menu system, 
				 * and our *OWN* event handlers (one for the 
				 * application as a whole and one for the 
				 * current form) to deal with the event.
				 */

				if (!SysHandleEvent (&event))
				if (!MenuHandleEvent (0, &event, &error))
				if (!appHandleEvent (&event))
					FrmDispatchEvent (&event);

			} while (event.eType != appStopEvent);

			/*
			 * When we're done, shut down
			 */
			termMath();	
			stopApp();
			FrmCloseAllForms();
		}
		return 0;
	}

	/*
	 * This is the top-level event handler for the entire application.  
	 * Here, we handle form load events and our menu events.
	 */


		static Boolean 
	appHandleEvent (EventPtr event) 
	{
		FormPtr	frm;
		Int	formId;
		Boolean	handled = false;
		
		if (event->eType == frmLoadEvent) 
		{
			/*
			* Load the resource for the form
			*/

			formId	= event->data.frmLoad.formID;
			frm	= FrmInitForm(formId);

			FrmSetActiveForm(frm);

			/*
			* install a form-specific event handler
			*/

			if (formId == MainForm)
				FrmSetEventHandler (frm, mainFormEventHandler);
			if (formId == AboutForm)
				FrmSetEventHandler (frm, AboutFormEventHandler);			
			if (formId == LicenseForm)
				FrmSetEventHandler (frm, LicenseFormEventHandler);
			if (formId == ManualForm)
				FrmSetEventHandler (frm, ManualFormEventHandler);
			// *** ADD NEW FORM HANDLING HERE *** //
			

			handled = true;
		}       
		return handled;
	}


	/*
	 * This is the event handler for the main form.  It handles all of 
	 * the user interactions with the user interface objects (e.g., 
	 * buttons, lists, text fields, and such) on the main form.
	 */


		static Boolean
	mainFormEventHandler(EventPtr event)
	{
		Boolean	handled	= false;
		FormPtr	frmP	= FrmGetActiveForm();
		switch (event->eType) 
		{

		/*
		 * the first event received by a form's event handler is
		 * the frmOpenEvent.  
		 */

		case frmOpenEvent:
			FrmDrawForm(frmP);
			mainFormInit(frmP);
			handled = true;
			break;  
		case menuEvent:
			handled=doMenu(frmP, event->data.menu.itemID);
			break;

		case fldEnterEvent:
                      	switch(event->data.fldEnter.fieldID)
			{	
			case TempField:
			{z=0;
			setFieldText (TempField, "");
			FrmSetFocus(frmP, FrmGetObjectIndex(frmP, TempField));
			setFieldText (EnergyField,  zero);
			setFieldText (LambdaField, zero);
			setFieldText (KField, zero);
			setFieldText (VelField, zero);
			handled = true;
			break;}
			
			case EnergyField:
			{z=1;
			setFieldText (EnergyField, "");
			FrmSetFocus(frmP, FrmGetObjectIndex(frmP, EnergyField));
			setFieldText (TempField, zero);
			setFieldText (LambdaField, zero);
			setFieldText (KField, zero);
			setFieldText (VelField, zero);
			handled = true;
			break;}
			
			case LambdaField:
			{z=2;
			setFieldText (LambdaField, "");
			FrmSetFocus(frmP, FrmGetObjectIndex(frmP, LambdaField));
			setFieldText (EnergyField, zero);
			setFieldText (TempField, zero);
			setFieldText (KField, zero);
			setFieldText (VelField, zero);
			handled = true;
			break;}

			case KField:
			{z=3;
			setFieldText (KField, "");
			FrmSetFocus(frmP, FrmGetObjectIndex(frmP, KField));
			setFieldText (EnergyField, zero);
			setFieldText (TempField, zero);
			setFieldText (LambdaField, zero);
			setFieldText (VelField, zero);
			handled = true;
			break;}

			case VelField:
			{z=4;
			setFieldText (VelField, "");
			FrmSetFocus(frmP, FrmGetObjectIndex(frmP, VelField));
			setFieldText (EnergyField, zero);
			setFieldText (TempField, zero);
			setFieldText (LambdaField, zero);
			setFieldText (KField, zero);
			handled = true;
			break;}



			break;
			}	
		// *** ADD EVENT HANDLING HERE *** //
		case ctlSelectEvent:
			switch(event->data.ctlSelect.controlID)
			{
			case	ConvBtn:
			{
				//add here
				
												
				conversion();
				
				if(c>MaxNumber)	
				{MaxNumberCheck();
				handled = true;
				break;
				}	
				
							
				display();

				handled = true;
				break;
			}
			
			
			}


		break;

//LISTS
		case popSelectEvent:
			{a=0;
		int	i	= event->data.popSelect.selection;

		switch (event->data.popSelect.controlID)
		{
		case EnPopUp:
			{			
			setFieldText(EnergyField, listEnM[i]);
			z=1;
			conversion();
			display();
			
			handled = true;
			break;
			
			}
		
		case TPopUp:
			{			
			setFieldText(TempField, listTM[i]);
			z=0;
			conversion();
			display();
		
			handled = true;
			break;
			
			}

		}



			}

//other buttons...


			}


		
		return handled;
	}

	/*
	 * This is the startup code for the form.  Here, we write our message 
	 * to the screen.
	 */

		static void 
	mainFormInit (FormPtr frmP)
	{	
		setFieldText (TempField, "");
		FrmSetFocus(frmP, FrmGetObjectIndex(frmP,TempField));
		setFieldText (LambdaField, zero);
		setFieldText (EnergyField, zero);
		setFieldText (KField, zero);
		setFieldText (VelField, zero);
		setupListEnM(EnList);
		setupListTM(TList);

		z=0;
		


		// *** ADD FORM INITIALIZATION HERE *** //
		
	}


static void 
	AboutFormInit (FormPtr frmP)
	{
		
		// *** ADD FORM INITIALIZATION HERE *** //
		
	}

static void 
	LicenseFormInit (FormPtr frmP)
	{
		
		MemHandle t=DmGetResource('tSTR', 2000);


    static Char    *foo    = (static Char *) MemHandleLock(t);
   
setFieldText(LicenseField, foo);

    //MemHandleUnlock (t);
    DmReleaseResource(t);
		
	}

static void 
	ManualFormInit (FormPtr frmP)
	{
		
		MemHandle t=DmGetResource('tSTR', 2100);


    static Char    *foo    = (static Char *) MemHandleLock(t);
   
setFieldText(ManualField, foo);

    //MemHandleUnlock (t);
    DmReleaseResource(t);
		
	}


static Boolean
	AboutFormEventHandler(EventPtr event)
	{
		Boolean	handled	= false;
		FormPtr	frmP	= FrmGetActiveForm();
		switch (event->eType) 
		{

		/*
		 * the first event received by a form's event handler is
		 * the frmOpenEvent.  
		 */

		case frmOpenEvent:
			FrmDrawForm(frmP);
			AboutFormInit(frmP);
			handled = true;
			break;  
		
		
		// *** ADD EVENT HANDLING HERE *** //
//BUTTONS
		case ctlSelectEvent:
			switch(event->data.ctlSelect.controlID)
			{
			case	CloseAboutMenuBtn:
			{	FrmGotoForm(MainForm);
				handled = true;
				break;
			}
			//other buttons...
			case	LicenseBtn:
			{	FrmGotoForm(LicenseForm);
				handled = true;
				break;
			}
			}
			break;
}
return handled;
}


static Boolean
	LicenseFormEventHandler(EventPtr event)
	{
		Boolean	handled	= false;
		FormPtr	frmP	= FrmGetActiveForm();
		switch (event->eType) 
		{

		/*
		 * the first event received by a form's event handler is
		 * the frmOpenEvent.  
		 */

		case frmOpenEvent:
			FrmDrawForm(frmP);
			LicenseFormInit(frmP);
			handled = true;
			break;  
		
		
		// *** ADD EVENT HANDLING HERE *** //
//BUTTONS
		case ctlSelectEvent:
			switch(event->data.ctlSelect.controlID)
			{
			case	LicenseCloseBtn:
			{	FrmGotoForm(AboutForm);
				handled = true;
				break;
			}
			//other buttons...
			
			}
			break;
}
return handled;
}
static Boolean
	ManualFormEventHandler(EventPtr event)
	{
		Boolean	handled	= false;
		FormPtr	frmP	= FrmGetActiveForm();
		switch (event->eType) 
		{

		/*
		 * the first event received by a form's event handler is
		 * the frmOpenEvent.  
		 */

		case frmOpenEvent:
			FrmDrawForm(frmP);
			ManualFormInit(frmP);
			handled = true;
			break;  
		
		
		// *** ADD EVENT HANDLING HERE *** //
//BUTTONS
		case ctlSelectEvent:
			switch(event->data.ctlSelect.controlID)
			{
			case	ManualCloseBtn:
			{	FrmGotoForm(MainForm);
				handled = true;
				break;
			}
			//other buttons...
			
			}
			break;
}
return handled;
}
//*************************************************************************
//  Routines necessary for MathLib
//**************************************************************************


void initMath() {
Err err;
err = SysLibFind("MathLib", &MathLibRef);
if (err != 0) { // library not loaded already
    err = SysLibLoad('libr', 'MthL', &MathLibRef);
    if (err == 0)
        err = MathLibOpen (MathLibRef, 1);
    }
}
void termMath() {
if (MathLibRef != -1) {
    Err err;
    UInt usecount;
    err = MathLibClose (MathLibRef, &usecount);
    if (usecount == 0)
        SysLibRemove (MathLibRef);
    }
}


//*************************************************************************
static Boolean	doMenu(FormPtr frmP, Word command)
{
	Boolean handled = false;
	switch (command) {
			case OptionsMenuAbout:
			FrmGotoForm(AboutForm);
			handled = true;
			break;
			case ManualMenuAbout:
			FrmGotoForm(ManualForm);
			handled = true;
			break;
			case ResetMenu:
			Reset();
			handled = true;
			break;

	}
	return handled;
}
		
	double conversion()
			{

			if(z==0)
				{getFieldText (TempField,TempChar);
				FlpCompDouble TempFloat;
				TempFloat.fd = FlpAToF(TempChar);
				TempFl = TempFloat.d;
				
				if(TempFl==0.00)
					{lambdaA=0.00;
					K=0.00;}
				else
					{energyJ=2.5*KB*TempFl;  //in J
					lambdaA=EnJToLambda(energyJ);
					K=LK(lambdaA);}
	
				energymeV=EnJToEnmeV(energyJ);
				Vel=EnJToVel(energyJ);
				}
				
			if(z==1)
				{getFieldText (EnergyField,EnergyChar);
				FlpCompDouble EnergyFloat;
				EnergyFloat.fd = FlpAToF(EnergyChar);
				EnergyFl = EnergyFloat.d;

				if(EnergyFl==0.00)
					{lambdaA=0.00;
					K=0.00;}
				else
					{lambdaA=EnJToLambda((EnergyFl*eV)/1000.0)/100.0;
					K=LK(lambdaA);}

				temperature=EnmeVToT(EnergyFl);
				Vel=EnJToVel((EnergyFl*eV)/1000.0)*100.0;
				}
				
			if(z==2)
				{getFieldText (LambdaField,LambdaChar);
				FlpCompDouble LambdaFloat;
				LambdaFloat.fd = FlpAToF(LambdaChar);
				lambdaA = LambdaFloat.d;
				
				if(lambdaA==0.00)
					{K=0.00;
					energyJ=0.00;}
				else
					{K=LK(lambdaA);
					energyJ= LambdaAToEnJ(lambdaA)*100.0;}

				energymeV=EnJToEnmeV(energyJ);
				temperature=EnmeVToT(energymeV);
				Vel=EnJToVel(energyJ);
				}
				
			if(z==3)
				{getFieldText (KField,KChar);
				FlpCompDouble KFloat;
				KFloat.fd = FlpAToF(KChar);
				K = KFloat.d;

				if(K==0.00)
					{lambdaA=0.00;
					energyJ= 0.00;}
				else
					{lambdaA=LK(K);
					energyJ= LambdaAToEnJ(lambdaA)*100.0;}
					
				energymeV=EnJToEnmeV(energyJ);
				temperature=EnmeVToT(energymeV);
				Vel=EnJToVel(energyJ);
				}
				
			if(z==4)
				{getFieldText (VelField,VelChar);
				FlpCompDouble VelFloat;
				VelFloat.fd = FlpAToF(VelChar);
				Vel = VelFloat.d;
				
				energyJ=VelToEnJ(Vel)*100.0;
				energymeV=EnJToEnmeV(energyJ);
				temperature=EnmeVToT(energymeV);

				if(Vel==0.00)
					{lambdaA=0.00;
					K=0.00;}
				else
					{lambdaA=EnJToLambda(energyJ);
					K=LK(lambdaA);}
				}
				
	return b;
	}	

	void display()
	{		if(z==0)
				{
				floatToStr(LambdaChar, lambdaA, 4);
				floatToStr(KChar, K, 4);
				floatToStr(EnergyChar, energymeV, 4);
				floatToStr(VelChar, Vel, 4);
				setFieldText (EnergyField,EnergyChar );
				setFieldText (LambdaField, LambdaChar);
				setFieldText (KField, KChar);
				setFieldText (VelField, VelChar);
				}
					
			if(z==1)
				{
				floatToStr(TempChar, temperature, 4);
				floatToStr(LambdaChar, lambdaA, 4);
				floatToStr(KChar, K, 4);
				floatToStr(VelChar, Vel, 4);
				setFieldText (TempField, TempChar);
				setFieldText (LambdaField, LambdaChar);
				setFieldText (KField, KChar);
				setFieldText (VelField, VelChar);
				}
				
			if(z==2)
				{
				floatToStr(TempChar, temperature, 4);
				floatToStr(EnergyChar, energymeV, 4);
				floatToStr(KChar, K, 4);
				floatToStr(VelChar, Vel, 4);
				setFieldText (TempField, TempChar);
				setFieldText (EnergyField, EnergyChar);
				setFieldText (KField, KChar);
				setFieldText (VelField, VelChar);
				}
				
			if(z==3)
				{
				floatToStr(TempChar, temperature, 4);
				floatToStr(EnergyChar, energymeV, 4);
				floatToStr(LambdaChar, lambdaA, 4);
				floatToStr(VelChar, Vel, 4);
				setFieldText (TempField, TempChar);
				setFieldText (EnergyField, EnergyChar);
				setFieldText (LambdaField, LambdaChar);
				setFieldText (VelField, VelChar);
				}

			if(z==4)
				{
				floatToStr(TempChar, temperature, 4);
				floatToStr(EnergyChar, energymeV, 4);
				floatToStr(LambdaChar, lambdaA, 4);
				floatToStr(KChar, K, 4);
				setFieldText (TempField, TempChar);
				setFieldText (EnergyField, EnergyChar);
				setFieldText (LambdaField, LambdaChar);
				setFieldText (KField, KChar);
				}


	}

static void MaxNumberCheck(void)

{
UInt16 alertSelection = FrmAlert(WarningAlert);
				setFieldText (TempField, "");
				FrmSetFocus(FrmGetActiveForm(), FrmGetObjectIndex(FrmGetActiveForm(), TempField));
				
}

static void Reset(void)
{
setFieldText (TempField, "");
		FrmSetFocus(FrmGetActiveForm(), FrmGetObjectIndex(FrmGetActiveForm(), TempField));
		setFieldText (EnergyField, zero);
		setFieldText (KField, zero);
		setFieldText (LambdaField, zero);
		setFieldText (VelField, zero);		
		z=0;
}

double EnJToVel(double energyJ)
	{	double a;
		a=sqrt(2.0*energyJ/(4.0*amu))/10.0;
		return a;
	}

double VelToEnJ(double Vel)
	{	double a;
		a=0.5*4.0*amu*pow(Vel, 2);  //in J
		return a;
	}

double EnmeVToT(double energymeV)
	{	double a;
		a=(energymeV*eV*10.0)/(2.5*KB);  //in K
		return a;
	}

double EnJToLambda(double energyJ)
	{	double a;
		a=(h/(sqrt(2.0*4.0*amu*energyJ))*1e10)*10;
		return a;
	}

double LambdaAToEnJ(double lambdaA)
	{	double a;
		a=(pow((h * (1.0E11)/lambdaA),2)/(8.0*amu));
		return a;
	}

double LK(double LK)
	{	double a;
		a=2.0*PI/LK;
		return a;
	}

double EnJToEnmeV(double energyJ)
	{	double a;
		a=(energyJ/eV)/10.0;
		return a;
	}


